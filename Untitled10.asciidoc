+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 1**
Given three integer arrays arr1, arr2 and arr3 **sorted** in **strictly increasing** order, return a sorted array of **only** the integers that appeared in **all** three arrays.

**Example 1:**

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]

Output: [1,5]

**Explanation:** Only 1 and 5 appeared in the three arrays.

----


+*In[1]:*+
[source, ipython3]
----
def findCommonElements(arr1, arr2, arr3):
    i = j = k = 0
    common = set()

    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        if arr1[i] == arr2[j] == arr3[k]:
            common.add(arr1[i])
            i += 1
            j += 1
            k += 1
        elif arr1[i] <= min(arr2[j], arr3[k]):
            i += 1
        elif arr2[j] <= min(arr1[i], arr3[k]):
            j += 1
        elif arr3[k] <= min(arr1[i], arr2[j]):
            k += 1

    return sorted(list(common))
arr1 = [1, 2, 3, 4, 5]
arr2 = [1, 2, 5, 7, 9]
arr3 = [1, 3, 4, 5, 8]
result = findCommonElements(arr1, arr2, arr3)
print(result)
----


+*Out[1]:*+
----
[1, 5]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 2**

Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.

**Note** that the integers in the lists may be returned in **any** order.

**Example 1:**

**Input:** nums1 = [1,2,3], nums2 = [2,4,6]

**Output:** [[1,3],[4,6]]

**Explanation:**

For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].

For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].

----


+*In[ ]:*+
[source, ipython3]
----
(*)Create a set called "set1" and add all the elements from nums1 to it.
(*)Create a set called "set2" and add all the elements from nums2 to it.
(*)Find the difference between set1 and set2 to get the distinct integers in nums1 that are not present in nums2. Store 
the result in a list called "not_in_nums2".
(*)Find the difference between set2 and set1 to get the distinct integers in nums2 that are not present in nums1. Store the 
result in a list called "not_in_nums1".
(*)Return the list [not_in_nums1, not_in_nums2].
----


+*In[2]:*+
[source, ipython3]
----
def findDistinct(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    
    not_in_nums2 = list(set1 - set2)
    not_in_nums1 = list(set2 - set1)
    
    return [not_in_nums1, not_in_nums2]
nums1 = [1, 2, 3]
nums2 = [2, 4, 6]
result = findDistinct(nums1, nums2)
print(result)
----


+*Out[2]:*+
----
[[4, 6], [1, 3]]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
 **Question 3**
Given a 2D integer array matrix, return *the **transpose** of* matrix.

The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.

**Example 1:**

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]

Output: [[1,4,7],[2,5,8],[3,6,9]]
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize an empty 2D list called "transpose" with the number of columns of the input matrix as the number of rows, and 
vice versa.
(*)Iterate over the rows and columns of the input matrix using nested loops.
(*)Access the element at the current row and column indices in the input matrix.
(*)Place this element at the current column and row indices in the "transpose" matrix.
(*)After iterating over all elements, return the "transpose" matrix.
----


+*In[3]:*+
[source, ipython3]
----
def transpose(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    
    transpose = [[0] * rows for _ in range(cols)]
    
    for i in range(rows):
        for j in range(cols):
            transpose[j][i] = matrix[i][j]
    
    return transpose
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
result = transpose(matrix)
print(result)
----


+*Out[3]:*+
----
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
 **Question 4**
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is **maximized**. Return *the maximized sum*.

**Example 1:**

Input: nums = [1,4,3,2]

Output: 4

**Explanation:** All possible pairings (ignoring the ordering of elements) are:

1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3

2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3

3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4

So the maximum possible sum is 4.
----


+*In[ ]:*+
[source, ipython3]
----
(*)Sort the input array nums in ascending order.
(*)Initialize a variable max_sum to store the maximum sum.
(*)Iterate over the sorted nums array in steps of 2.
(*)In each iteration, add the minimum value of the current pair to max_sum.
(*)Return max_sum.
----


+*In[4]:*+
[source, ipython3]
----
def arrayPairSum(nums):
    nums.sort()
    max_sum = 0
    
    for i in range(0, len(nums), 2):
        max_sum += nums[i]
    
    return max_sum
nums = [1, 4, 3, 2]
result = arrayPairSum(nums)
print(result)
----


+*Out[4]:*+
----
4
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 5**
You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.

**Example 1:**

[]()

![v2.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4bd91cfa-d2b1-47b3-8197-a72e8dcfff4b/v2.jpg)

**Input:** n = 5

**Output:** 2

**Explanation:** Because the 3rd row is incomplete, we return 2.

</aside>
----


+*In[5]:*+
[source, ipython3]
----
def arrangeCoins(n):
    left = 0
    right = n
    
    while left <= right:
        mid = left + (right - left) // 2
        sum_mid = (mid * (mid + 1)) // 2
        
        if sum_mid <= n:
            left = mid + 1
        else:
            right = mid - 1
    
    return right
n = 5
result = arrangeCoins(n)
print(result)
----


+*Out[5]:*+
----
2
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
 **Question 6**
Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.

**Example 1:**

Input: nums = [-4,-1,0,3,10]

Output: [0,1,9,16,100]

**Explanation:** After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100]

----


+*In[ ]:*+
[source, ipython3]
----
(*)initialize an empty array result to store the squares of the numbers.
(*)Initialize two pointers, left = 0 and right = len(nums) - 1.
While left <= right, do the following:
If the absolute value of nums[left] is greater than or equal to the absolute value of nums[right], square nums[left] and 
append it to result. Then, increment left by 1.
Otherwise, square nums[right] and append it to result. Then, decrement right by 1.
(*)Reverse the result array to get the squares in non-decreasing order.
(*)Return the result array.
----


+*In[6]:*+
[source, ipython3]
----
def sortedSquares(nums):
    result = []
    left = 0
    right = len(nums) - 1
    
    while left <= right:
        if abs(nums[left]) >= abs(nums[right]):
            result.append(nums[left] ** 2)
            left += 1
        else:
            result.append(nums[right] ** 2)
            right -= 1
    
    return result[::-1]
nums = [-4, -1, 0, 3, 10]
result = sortedSquares(nums)
print(result)
----


+*Out[6]:*+
----
[0, 1, 9, 16, 100]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
**Question 7**
You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return *the number of maximum integers in the matrix after performing all the operations*

**Example 1:**

![q4.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4d0890d0-7bc7-4f59-be8e-352d9f3c1c52/q4.jpg)

**Input:** m = 3, n = 3, ops = [[2,2],[3,3]]

**Output:** 4

**Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4.
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize minRow and minCol variables with m and n as their initial values.
(*)Iterate through each operation op in ops:
Update minRow as the minimum of minRow and op[0].
Update minCol as the minimum of minCol and op[1].
(*)Return minRow * minCol.
----


+*In[8]:*+
[source, ipython3]
----
def maxCount(m, n, ops):
    minRow = m
    minCol = n
    
    for op in ops:
        minRow = min(minRow, op[0])
        minCol = min(minCol, op[1])
    
    return minRow * minCol
m = 3
n = 3
ops = [[2, 2], [3, 3]]
result = maxCount(m, n, ops)
print(result)  # Output: 4
----


+*Out[8]:*+
----
4
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 8**

Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

*Return the array in the form* [x1,y1,x2,y2,...,xn,yn].

**Example 1:**

**Input:** nums = [2,5,1,3,4,7], n = 3

**Output:** [2,3,5,4,1,7]

**Explanation:** Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7]

----


+*In[ ]:*+
[source, ipython3]
----
(*)Create an empty array result to store the final result.
(*)Iterate i from 0 to n-1:
Append nums[i] to result.
Append nums[i+n] to result.
(*)Return result.
----


+*In[9]:*+
[source, ipython3]
----
def shuffle(nums, n):
    result = []
    for i in range(n):
        result.append(nums[i])
        result.append(nums[i+n])
    return result
nums = [2, 5, 1, 3, 4, 7]
n = 3
result = shuffle(nums, n)
print(result)
----


+*Out[9]:*+
----
[2, 3, 5, 4, 1, 7]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
